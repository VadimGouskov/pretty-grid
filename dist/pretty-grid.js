!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.prettyGrid=n():t.prettyGrid=n()}(this,(function(){return(()=>{"use strict";var t,n={d:(t,r)=>{for(var e in r)n.o(r,e)&&!n.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:r[e]})},o:(t,n)=>Object.prototype.hasOwnProperty.call(t,n),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};n.r(r),n.d(r,{Grid:()=>f,GridPoint:()=>c,GridShape:()=>e,ShapeOrigin:()=>t,and:()=>g,cols:()=>E,ellipseShapeOrigin:()=>i,even:()=>s,evenCols:()=>a,evenRows:()=>h,not:()=>R,odd:()=>p,oddCols:()=>l,oddRows:()=>d,or:()=>v,rectangleShapeOrigin:()=>u,rows:()=>y}),function(t){t.CORNER="corner",t.CENTER="center"}(t||(t={}));var e,o={Rectangle:t.CORNER,Ellipse:t.CENTER},i=function(t){o.Ellipse=t},u=function(t){o.Rectangle=t};!function(t){t[t.RECTANGLE=0]="RECTANGLE",t[t.ELLIPSE=1]="ELLIPSE"}(e||(e={}));var c=function(t,n){this.x=t,this.y=n},f=function(){function n(t,n,r,o,i){this.points=[[]],0===t&&(t=1,console.warn("Cannot create a grid with 0 columns, cols defaults to 1")),0===n&&(n=1,console.warn("Cannot create a grid with 0 rows, rows defaults to 1")),i===e.ELLIPSE?this.initEllipseGrid(t,n,r,o):this.initRectangleGrid(t,n,r,o)}return n.prototype.initRectangleGrid=function(n,r,e,i){var u=e/(n-1),f=i/(r-1),s=0,p=0;o.Rectangle===t.CENTER&&(s=-e/2,p=-i/2);for(var a=0;a<n;a++){this.points[a]=[];for(var l=0;l<r;l++)this.points[a][l]=new c(a*u+s,l*f+p)}},n.prototype.initEllipseGrid=function(n,r,e,i){var u=i/r,f=e/r,s=2*Math.PI/n,p=0,a=0;o.Ellipse===t.CORNER&&(p=e/2,a=i/2);for(var l=0;l<n;l++){this.points[l]=[];for(var h=l*s,d=r;d>=1;d--){var y=d*u,E=d*f/2*Math.cos(h),g=y/2*Math.sin(h);this.points[l][d-1]=new c(E+p,g+a)}}},n.prototype.get=function(){return this.points},n.prototype.set=function(t){this.points=t},n.prototype.getPoint=function(t,n){return this.points[t][n]},n.prototype.getFlat=function(){return this.points.reduce((function(t,n){return t.concat(n)}),[])},n.prototype.draw=function(t,n){return this.points.forEach((function(r,e){return r.forEach((function(r,o){n&&!n(r,e,o)||t(r,e,o)}))})),this},n.prototype.translate=function(t,n,r){return this.points.forEach((function(e,o){return e.forEach((function(e,i){r&&!r(e,o,i)||(e.x+=t,e.y+=n)}))})),this},n.prototype.copy=function(){var t=new n(this.points.length,this.points[0].length,0,0),r=JSON.parse(JSON.stringify(this.points));return t.set(r),t},n}(),s=function(){return function(t,n,r){return n%2==0&&r%2==0}},p=function(){return function(t,n,r){return n%2!=0&&r%2!=0}},a=function(){return function(t,n,r){return n%2==0}},l=function(){return function(t,n,r){return n%2!=0}},h=function(){return function(t,n,r){return r%2==0}},d=function(){return function(t,n,r){return r%2!=0}},y=function(t,n){return function(r,e,o){return o>=t&&o<=n}},E=function(t,n){return function(r,e,o){return e>=t&&e<=n}},g=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n,r,e){for(var o=0,i=t;o<i.length;o++)if(!(0,i[o])(n,r,e))return!1;return!0}},v=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n,r,e){for(var o=0,i=t;o<i.length;o++)if((0,i[o])(n,r,e))return!0;return!1}},R=function(t){return function(n,r,e){return!t(n,r,e)}};return r})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,