!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.prettyGrid=n():t.prettyGrid=n()}(this,(function(){return(()=>{"use strict";var t,n={d:(t,r)=>{for(var o in r)n.o(r,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:r[o]})},o:(t,n)=>Object.prototype.hasOwnProperty.call(t,n),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};n.r(r),n.d(r,{Grid:()=>e,GridPoint:()=>o,GridShape:()=>t,and:()=>d,cols:()=>h,even:()=>i,evenCols:()=>f,evenRows:()=>s,not:()=>y,odd:()=>u,oddCols:()=>c,oddRows:()=>p,or:()=>l,rows:()=>a}),function(t){t[t.RECTANGLE=0]="RECTANGLE",t[t.ELLIPSE=1]="ELLIPSE"}(t||(t={}));var o=function(t,n){this.x=t,this.y=n},e=function(){function n(n,r,o,e,i){this.points=[[]],0===n&&(n=1,console.warn("Cannot create a grid with 0 columns, cols defaults to 1")),0===r&&(r=1,console.warn("Cannot create a grid with 0 rows, rows defaults to 1")),i===t.ELLIPSE?this.initEllipseGrid(n,r,o,e):this.initRectangleGrid(n,r,o,e)}return n.prototype.initRectangleGrid=function(t,n,r,e){for(var i=r/(t-1),u=e/(n-1),f=0;f<t;f++){this.points[f]=[];for(var c=0;c<n;c++)this.points[f][c]=new o(f*i,c*u)}},n.prototype.initEllipseGrid=function(t,n,r,e){for(var i=e/n,u=r/n,f=2*Math.PI/t,c=0;c<t;c++){this.points[c]=[];for(var s=c*f,p=n;p>=1;p--){var a=p*i,h=p*u/2*Math.cos(s),d=a/2*Math.sin(s);this.points[c][p-1]=new o(h,d)}}},n.prototype.get=function(){return this.points},n.prototype.set=function(t){this.points=t},n.prototype.getPoint=function(t,n){return this.points[t][n]},n.prototype.getFlat=function(){return this.points.reduce((function(t,n){return t.concat(n)}),[])},n.prototype.draw=function(t,n){return this.points.forEach((function(r,o){return r.forEach((function(r,e){n&&!n(r,o,e)||t(r,o,e)}))})),this},n.prototype.translate=function(t,n,r){return this.points.forEach((function(o,e){return o.forEach((function(o,i){r&&!r(o,e,i)||(o.x+=t,o.y+=n)}))})),this},n.prototype.copy=function(){var t=new n(this.points.length,this.points[0].length,0,0),r=JSON.parse(JSON.stringify(this.points));return t.set(r),t},n}(),i=function(){return function(t,n,r){return n%2==0&&r%2==0}},u=function(){return function(t,n,r){return n%2!=0&&r%2!=0}},f=function(){return function(t,n,r){return n%2==0}},c=function(){return function(t,n,r){return n%2!=0}},s=function(){return function(t,n,r){return r%2==0}},p=function(){return function(t,n,r){return r%2!=0}},a=function(t,n){return function(r,o,e){return e>=t&&e<=n}},h=function(t,n){return function(r,o,e){return o>=t&&o<=n}},d=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n,r,o){for(var e=0,i=t;e<i.length;e++)if(!(0,i[e])(n,r,o))return!1;return!0}},l=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n,r,o){for(var e=0,i=t;e<i.length;e++)if((0,i[e])(n,r,o))return!0;return!1}},y=function(t){return function(n,r,o){return!t(n,r,o)}};return r})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,