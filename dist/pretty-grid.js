!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.prettyGrid=e():t.prettyGrid=e()}(this,(function(){return(()=>{"use strict";var t={d:(e,o)=>{for(var n in o)t.o(o,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{Grid:()=>n});var o=function(t,e){this.x=t,this.y=e},n=function(){function t(t,e,n,r){this.points=[[]];for(var i=n/(t-1),p=r/(e-1),f=0;f<t;f++){this.points[f]=[];for(var s=0;s<e;s++)this.points[f][s]=new o(f*i,s*p)}}return Object.defineProperty(t.prototype,"flat",{get:function(){return this.points.reduce((function(t,e){return t.concat(e)}),[])},enumerable:!1,configurable:!0}),t.prototype.get=function(){return this.points},t.prototype.set=function(t){this.points=t},t.prototype.getPoint=function(t,e){return this.points[t][e]},t.prototype.draw=function(t){this.flat.forEach((function(e){return t(e)}))},t.prototype.translate=function(t,e){this.points.forEach((function(o){return o.forEach((function(o){o.x+=t,o.y+=e}))}))},t.prototype.copy=function(){var e=new t(this.points.length,this.points[0].length,0,0),o=JSON.parse(JSON.stringify(this.points));return e.set(o),e},t}();return e})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,