!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.prettyGrid=n():t.prettyGrid=n()}(this,(function(){return(()=>{"use strict";var t={d:(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},o:(t,n)=>Object.prototype.hasOwnProperty.call(t,n),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{Grid:()=>o,GridPoint:()=>e,even:()=>r,evenCols:()=>u,evenRows:()=>p,odd:()=>i,oddCols:()=>f,oddRows:()=>s});var e=function(t,n){this.x=t,this.y=n},o=function(){function t(t,n,o,r){this.points=[[]];for(var i=o/(t-1),u=r/(n-1),f=0;f<t;f++){this.points[f]=[];for(var p=0;p<n;p++)this.points[f][p]=new e(f*i,p*u)}}return Object.defineProperty(t.prototype,"flat",{get:function(){return this.points.reduce((function(t,n){return t.concat(n)}),[])},enumerable:!1,configurable:!0}),t.prototype.get=function(){return this.points},t.prototype.set=function(t){this.points=t},t.prototype.getPoint=function(t,n){return this.points[t][n]},t.prototype.draw=function(t,n){return this.points.forEach((function(e,o){return e.forEach((function(e,r){n&&!n(e,o,r)||t(e)}))})),this},t.prototype.translate=function(t,n,e){return this.points.forEach((function(o,r){return o.forEach((function(o,i){e&&!e(o,r,i)||(o.x+=t,o.y+=n)}))})),this},t.prototype.copy=function(){var n=new t(this.points.length,this.points[0].length,0,0),e=JSON.parse(JSON.stringify(this.points));return n.set(e),n},t}(),r=function(t,n,e){return n%2==0&&e%2==0},i=function(t,n,e){return n%2!=0&&e%2!=0},u=function(t,n,e){return n%2==0},f=function(t,n,e){return n%2!=0},p=function(t,n,e){return e%2==0},s=function(t,n,e){return e%2!=0};return n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aUIsU0FBQ1osRUFBT1AsRUFBS0MsR0FBUSxPQUFBRCxFQUFNLEdBQU0sR0FBS0MsRUFBTSxHQUFNLEdBRW5FbUIsRUFBc0IsU0FBQ2IsRUFBT1AsRUFBS0MsR0FBUSxPQUFBRCxFQUFNLEdBQU0sR0FFdkRxQixFQUFxQixTQUFDZCxFQUFPUCxFQUFLQyxHQUFRLE9BQUFELEVBQU0sR0FBTSxHQUV0RHNCLEVBQXNCLFNBQUNmLEVBQU9QLEVBQUtDLEdBQVEsT0FBQUEsRUFBTSxHQUFNLEdBRXZEc0IsRUFBcUIsU0FBQ2hCLEVBQU9QLEVBQUtDLEdBQVEsT0FBQUEsRUFBTSxHQUFNLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmV0dHlHcmlkL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9wcmV0dHlHcmlkL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3ByZXR0eUdyaWQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3ByZXR0eUdyaWQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9wcmV0dHlHcmlkL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcHJldHR5R3JpZC8uL3NyYy9ncmlkLnRzIiwid2VicGFjazovL3ByZXR0eUdyaWQvLi9zcmMvY29uZGl0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJwcmV0dHlHcmlkXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInByZXR0eUdyaWRcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCB7IENvbmRpdGlvbiB9IGZyb20gJy4vY29uZGl0aW9ucyc7XG5cbmV4cG9ydCB0eXBlIEdyaWRGdW5jdGlvbiA9IChwb2ludDogR3JpZFBvaW50LCBjb2w/OiBudW1iZXIsIHJvdz86IG51bWJlcikgPT4gdm9pZDtcblxuZXhwb3J0IGNsYXNzIEdyaWRQb2ludCB7XG4gICAgeDogbnVtYmVyO1xuICAgIHk6IG51bWJlcjtcbiAgICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEdyaWQge1xuICAgIHByaXZhdGUgcG9pbnRzOiBHcmlkUG9pbnRbXVtdID0gW1tdXTtcblxuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEluc3RhbnRpYXRlcyBhIG5ldyAyIERpbWVuc2lvbmFsIEdyaWQuXG4gICAgICogVGhlIGhvcml6b250YWwgZGlzdGFuY2UgYmV0d2VlbiBlYWNoIGNvbHVtbjogd2lkdGggLyAoY29scyAtIDEpXG4gICAgICogVGhlIHZlcnRpY2FsIGRpc3RhbmNlIGJldHdlZW4gZWFjaCByb3cgOiBoZWlnaHQgLyAocm93cyAtIDEpXG4gICAgICogQHBhcmFtIGNvbHNcbiAgICAgKiBAcGFyYW0gcm93c1xuICAgICAqIEBwYXJhbSB3aWR0aFxuICAgICAqIEBwYXJhbSBoZWlnaHRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb2xzOiBudW1iZXIsIHJvd3M6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qgc3RlcENvbHMgPSB3aWR0aCAvIChjb2xzIC0gMSk7XG4gICAgICAgIGNvbnN0IHN0ZXBSb3dzID0gaGVpZ2h0IC8gKHJvd3MgLSAxKTtcblxuICAgICAgICAvLyBpbml0aWFsaXplIGdyaWRcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2xzOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMucG9pbnRzW2ldID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJvd3M7IGorKykge1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRzW2ldW2pdID0gbmV3IEdyaWRQb2ludChpICogc3RlcENvbHMsIGogKiBzdGVwUm93cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgZmxhdCgpOiBHcmlkUG9pbnRbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvaW50cy5yZWR1Y2UoKGFjYywgdmFsKSA9PiBhY2MuY29uY2F0KHZhbCksIFtdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHRoZSBjdXJyZW50IHBvaW50cyBvbiB0aGUgZ3JpZFxuICAgICAqIHdhcm5pbmc6IGdldHMgdGhlIHBvaW50cyBhcnJheSBieSByZWZlcmVuY2UuIENoYW5nZXMgdG8gaW5kaXZpZHVhbCBwb2ludHMgd2lsbCBiZSByZWZsZWN0ZWQgaW4gdGhlIG9yaWdpbmFsIGdyaWQgb2JqZWN0LlxuICAgICAqIFRvIGdldCBhIGRlZXAgY29weSB1c2UgZ3JpZC5jb3B5KCkuIGVnLiBncmlkLmNvcHkuZ2V0KClcbiAgICAgKi9cbiAgICBnZXQoKTogR3JpZFBvaW50W11bXSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvaW50cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgLyByZXBsYWNlIGFsbCB0aGUgY3VycmVudCBwb2ludHMgb24gdGhlIGdyaWRcbiAgICAgKiB3YXJuaW5nOiBzZXRzIGEgcmVmZXJlbmNlIHRvIHRoZSBwcm92aWRlZCBwb2ludHMuIENoYW5nZXMgaW4gbWFkZSBieSB0aGlzIGdyaWQgb2JqZWN0IHRvIHRoZSBwb2ludHMgd2lsbCBiZSByZWZsZWN0ZWQgaW4gdGhlIHByb3ZpZGVkIHBvaW50cyBhcnJheS5cbiAgICAgKi9cbiAgICAvLyBUT0RPIHNldCBhIGRlZXAgY29weSBtYWtlcyBtb3JlIHNlbmNlPyBvciBtYWtlIGl0IG9wdGlvbmFsIGFuZCBwcm92aWRlIGEgZGVlcCBjb3B5IGhlbHBlciBmdW5jdGlvblxuICAgIHNldChwb2ludHM6IEdyaWRQb2ludFtdW10pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wb2ludHMgPSBwb2ludHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHBvaW50IGZyb20gZnJvbSBpbmRlY2VzIFtjb2wsIHJvd11cbiAgICAgKiBAcGFyYW0gY29sXG4gICAgICogQHBhcmFtIHJvd1xuICAgICAqL1xuXG4gICAgZ2V0UG9pbnQoY29sOiBudW1iZXIsIHJvdzogbnVtYmVyKTogR3JpZFBvaW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9pbnRzW2NvbF1bcm93XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb29wcyBvdmVyIHRoZSBwb2ludHMgaW4gdGhlIGdyaWQsIHBhc3NpbmcgZWFjaCBwb2ludCB0byB0aGUgcHJvdmlkZWQgQHBhcmFtIGZ1bmNcbiAgICAgKiBQcm92aWRlIGEgZHJhd2luZyBmdW5jdGlvblxuICAgICAqIEBwYXJhbSBmdW5jIGEgZnVuY3Rpb24gdGhhdCBoYW5kbGVzIGRyYXdpbmcgb2YgZWFjaCBpbmRpdmlkdWFsIHBvaW50XG4gICAgICovXG4gICAgZHJhdyhmdW5jOiBHcmlkRnVuY3Rpb24sIGNvbmRpdGlvbj86IENvbmRpdGlvbik6IEdyaWQge1xuICAgICAgICB0aGlzLnBvaW50cy5mb3JFYWNoKChjb2wsIGNvbEluZGV4KSA9PlxuICAgICAgICAgICAgY29sLmZvckVhY2goKHBvaW50LCByb3dJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghIWNvbmRpdGlvbiAmJiAhY29uZGl0aW9uKHBvaW50LCBjb2xJbmRleCwgcm93SW5kZXgpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZnVuYyhwb2ludCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlcyB0aGUgZW50aXJlIGdyaWQgYnkgQHBhcmFtIHggZW4gQHBhcmFtIHkgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0geFxuICAgICAqIEBwYXJhbSB5XG4gICAgICovXG4gICAgdHJhbnNsYXRlKHg6IG51bWJlciwgeTogbnVtYmVyLCBjb25kaXRpb24/OiBDb25kaXRpb24pOiBHcmlkIHtcbiAgICAgICAgdGhpcy5wb2ludHMuZm9yRWFjaCgoY29sLCBjb2xJbmRleCkgPT5cbiAgICAgICAgICAgIGNvbC5mb3JFYWNoKChwb2ludCwgcm93SW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoISFjb25kaXRpb24gJiYgIWNvbmRpdGlvbihwb2ludCwgY29sSW5kZXgsIHJvd0luZGV4KSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHBvaW50LnggKz0geDtcbiAgICAgICAgICAgICAgICBwb2ludC55ICs9IHk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgdGhlIGN1cnJlbnQgZ3JpZCBvYmplY3RcbiAgICAgKi9cbiAgICBjb3B5KCk6IEdyaWQge1xuICAgICAgICBjb25zdCBjb2xzID0gdGhpcy5wb2ludHMubGVuZ3RoO1xuICAgICAgICAvLyBUT0RPIHRha2UgaW50byBhY2NvdW50IHBvc2liaWxpdHkgb2YgbW9kaWZpZWQgcm93XG4gICAgICAgIGNvbnN0IHJvd3MgPSB0aGlzLnBvaW50c1swXS5sZW5ndGg7XG5cbiAgICAgICAgLy8gV2lkdGggYW5kIGhlaWdodCBvZiBncmlkIGRvIG5vdCBtYXR0ZXIsIHRoZXNlIHdpbGwgZ2V0IHNldFxuICAgICAgICBjb25zdCBjb3BpZWRHcmlkID0gbmV3IEdyaWQoY29scywgcm93cywgMCwgMCk7XG4gICAgICAgIGNvbnN0IHBvaW50c0RlZXBDb3B5OiBHcmlkUG9pbnRbXVtdID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnBvaW50cykpO1xuICAgICAgICBjb3BpZWRHcmlkLnNldChwb2ludHNEZWVwQ29weSk7XG5cbiAgICAgICAgcmV0dXJuIGNvcGllZEdyaWQ7XG4gICAgfVxuXG4gICAgLyogXG4gICAgZ2V0U2VjdGlvbihzdGFydENvbDogbnVtYmVyLCBlbmRDb2w6IG51bWJlciwgc3RhcnRSb3c6IG51bWJlciwgZW5kUm93OiBudW1iZXIpOiBHcmlkIHtcbiAgICAgICAgY29uc3Qgc2xpY2UgPSB0aGlzLnBvaW50cy5zbGljZShzdGFydENvbCwgZW5kQ29sICsgMSkubWFwKChpKSA9PiBpLnNsaWNlKHN0YXJ0Um93LCBlbmRSb3cgKyAxKSk7XG4gICAgICAgIGNvbnN0IGdyaWRGcm9tU2xpY2UgPSBuZXcgR3JpZChzbGljZVswXS5sZW5ndGgsIHNsaWNlLmxlbmd0aCwgMCwgMCk7XG4gICAgICAgIGdyaWRGcm9tU2xpY2Uuc2V0KHNsaWNlKTtcbiAgICAgICAgcmV0dXJuIGdyaWRGcm9tU2xpY2U7XG4gICAgfVxuICAgICovXG59XG4iLCJpbXBvcnQgeyBHcmlkUG9pbnQgfSBmcm9tICcuL2dyaWQnO1xuXG5leHBvcnQgdHlwZSBDb25kaXRpb24gPSAocG9pbnQ6IEdyaWRQb2ludCwgY29sPzogbnVtYmVyLCByb3c/OiBudW1iZXIpID0+IGJvb2xlYW47XG5cbmV4cG9ydCBjb25zdCBhbGw6IENvbmRpdGlvbiA9IChwb2ludCwgY29sLCByb3cpID0+IHRydWU7XG5cbmV4cG9ydCBjb25zdCBldmVuOiBDb25kaXRpb24gPSAocG9pbnQsIGNvbCwgcm93KSA9PiBjb2wgJSAyID09PSAwICYmIHJvdyAlIDIgPT09IDA7XG5cbmV4cG9ydCBjb25zdCBvZGQ6IENvbmRpdGlvbiA9IChwb2ludCwgY29sLCByb3cpID0+IGNvbCAlIDIgIT09IDAgJiYgcm93ICUgMiAhPT0gMDtcblxuZXhwb3J0IGNvbnN0IGV2ZW5Db2xzOiBDb25kaXRpb24gPSAocG9pbnQsIGNvbCwgcm93KSA9PiBjb2wgJSAyID09PSAwO1xuXG5leHBvcnQgY29uc3Qgb2RkQ29sczogQ29uZGl0aW9uID0gKHBvaW50LCBjb2wsIHJvdykgPT4gY29sICUgMiAhPT0gMDtcblxuZXhwb3J0IGNvbnN0IGV2ZW5Sb3dzOiBDb25kaXRpb24gPSAocG9pbnQsIGNvbCwgcm93KSA9PiByb3cgJSAyID09PSAwO1xuXG5leHBvcnQgY29uc3Qgb2RkUm93czogQ29uZGl0aW9uID0gKHBvaW50LCBjb2wsIHJvdykgPT4gcm93ICUgMiAhPT0gMDtcbiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ0aGlzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ4IiwieSIsImNvbHMiLCJyb3dzIiwid2lkdGgiLCJoZWlnaHQiLCJwb2ludHMiLCJzdGVwQ29scyIsInN0ZXBSb3dzIiwiaSIsImoiLCJHcmlkUG9pbnQiLCJyZWR1Y2UiLCJhY2MiLCJ2YWwiLCJjb25jYXQiLCJzZXQiLCJnZXRQb2ludCIsImNvbCIsInJvdyIsImRyYXciLCJmdW5jIiwiY29uZGl0aW9uIiwiZm9yRWFjaCIsImNvbEluZGV4IiwicG9pbnQiLCJyb3dJbmRleCIsInRyYW5zbGF0ZSIsImNvcHkiLCJjb3BpZWRHcmlkIiwiR3JpZCIsImxlbmd0aCIsInBvaW50c0RlZXBDb3B5IiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiZXZlbiIsIm9kZCIsImV2ZW5Db2xzIiwib2RkQ29scyIsImV2ZW5Sb3dzIiwib2RkUm93cyJdLCJzb3VyY2VSb290IjoiIn0=