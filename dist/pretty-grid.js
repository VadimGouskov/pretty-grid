!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.prettyGrid=n():t.prettyGrid=n()}(this,(function(){return(()=>{"use strict";var t={d:(n,r)=>{for(var o in r)t.o(r,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:r[o]})},o:(t,n)=>Object.prototype.hasOwnProperty.call(t,n),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},n={};t.r(n),t.d(n,{Grid:()=>o,GridPoint:()=>r,and:()=>d,cols:()=>a,even:()=>e,evenCols:()=>u,evenRows:()=>c,not:()=>y,odd:()=>i,oddCols:()=>f,oddRows:()=>s,or:()=>h,rows:()=>p});var r=function(t,n){this.x=t,this.y=n},o=function(){function t(t,n,o,e){this.points=[[]];for(var i=o/(t-1),u=e/(n-1),f=0;f<t;f++){this.points[f]=[];for(var c=0;c<n;c++)this.points[f][c]=new r(f*i,c*u)}}return t.prototype.get=function(){return this.points},t.prototype.set=function(t){this.points=t},t.prototype.getPoint=function(t,n){return this.points[t][n]},t.prototype.getFlat=function(){return this.points.reduce((function(t,n){return t.concat(n)}),[])},t.prototype.draw=function(t,n){return this.points.forEach((function(r,o){return r.forEach((function(r,e){n&&!n(r,o,e)||t(r)}))})),this},t.prototype.translate=function(t,n,r){return this.points.forEach((function(o,e){return o.forEach((function(o,i){r&&!r(o,e,i)||(o.x+=t,o.y+=n)}))})),this},t.prototype.copy=function(){var n=new t(this.points.length,this.points[0].length,0,0),r=JSON.parse(JSON.stringify(this.points));return n.set(r),n},t}(),e=function(){return function(t,n,r){return n%2==0&&r%2==0}},i=function(){return function(t,n,r){return n%2!=0&&r%2!=0}},u=function(){return function(t,n,r){return n%2==0}},f=function(){return function(t,n,r){return n%2!=0}},c=function(){return function(t,n,r){return r%2==0}},s=function(){return function(t,n,r){return r%2!=0}},p=function(t,n){return function(r,o,e){return e>=t&&e<=n}},a=function(t,n){return function(r,o,e){return o>=t&&o<=n}},d=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n,r,o){for(var e=0,i=t;e<i.length;e++)if(!(0,i[e])(n,r,o))return!1;return!0}},h=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n,r,o){for(var e=0,i=t;e<i.length;e++)if((0,i[e])(n,r,o))return!0;return!1}},y=function(t){return function(n,r,o){return!t(n,r,o)}};return n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,